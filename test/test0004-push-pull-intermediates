#!/bin/bash

set -e

. "$(dirname "$0")/common.sh"

create_git_workspace $TEST_TMP_DIR/client
create_git_workspace $TEST_TMP_DIR/client2
create_git_workspace $TEST_TMP_DIR/server.git --bare

pushd $TEST_TMP_DIR/server.git
# Remove sample hooks just so it is easier to see what I've installed
rm -f hooks/*.sample
git-replay init-server
popd

for client in client client2
do
    pushd $TEST_TMP_DIR/$client
    rm -f hooks/*.sample
    git-replay init

    git remote add origin $TEST_TMP_DIR/server.git
    popd
done

pushd $TEST_TMP_DIR/client

# Establish something on master first
quick_commit_files "First commit" one
git push origin master:master

# Update the second client
pushd $TEST_TMP_DIR/client2
git fetch origin
git checkout -b master origin/master
popd

# Switch to a feature branch and create a couple of initial commits
git checkout -b feature
quick_commit_files "Second commi" two
git commit --amend -m "Second commit"
quick_commit_files "Third commi" three
changeid=$(git rev-parse HEAD)
git commit --amend -m "Third commit"

remote_push_branch=refs/for/master
remote_fetch_branch=refs/changes/master/$oldhead

# Push the initial thing to the server
git-replay push origin feature:$remote_push_branch

# Update the second client
pushd $TEST_TMP_DIR/client2
git fetch origin refs/changes/master/$changeid
fetch_head=$(git rev-parse FETCH_HEAD)
git-replay fetch-intermediates origin origin/master..$fetch_head
# Make sure that the intermediate commits were pulled down
git cat-file -p $(git cat-file -p ${fetch_head} | awk '/predecessor/ {print$2}')
git cat-file -p $(git cat-file -p ${fetch_head}~ | awk '/predecessor/ {print$2}')
git-replay merge $fetch_head
popd

# Put something else on master to rebase to.
git checkout master

quick_commit_files "Four" four
quick_commit_files "Five" five
git push origin master:master

# Go back to the feature branch, rebase and try to push
git checkout feature
git rebase origin/master
git-replay push origin feature:$remote_push_branch

# Try some stuff on the second client
pushd $TEST_TMP_DIR/client2
prevhead=$(git rev-parse HEAD)
# Create an amended commit locally that will conflict with what we fetch from the server.
git commit --amend -C HEAD
git fetch origin refs/changes/master/$changeid
not git-replay merge FETCH_HEAD

# Revert back to before the amend. The merge should work. Analogous to a fast-forward.
git reset --hard $prevhead

git-replay merge FETCH_HEAD
assert_equal "Local and fetched head" "$(git rev-parse FETCH_HEAD)" "$(git rev-parse HEAD)"

popd
